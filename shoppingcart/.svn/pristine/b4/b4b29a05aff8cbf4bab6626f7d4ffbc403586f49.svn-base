// Finish and comment me!

package model;

import java.math.BigDecimal;
import java.text.NumberFormat;
import java.util.Locale;

/**
 * Class that stores information about a purchase order for a particular item.
 * @author Jasmine Dacones
 * @version 4/10/16
 */
public final class ItemOrder {
    
    /** Item Object. */
    private final Item myItem;
    
    /** Number of an Item bought. */
    private final int myQuantity;
    
    /** Total cost of the Items bought. */
    private final BigDecimal myTotalCost;
    
    /** Price formatting. */
    private NumberFormat myNf = NumberFormat.getCurrencyInstance(Locale.US);
    
    
    /**
     * Initializes an item order of a given quantity.
     * @param theItem Item object
     * @param theQuantity number of an Item bought
     */
    public ItemOrder(final Item theItem, final int theQuantity) {
        myItem = theItem;
        myQuantity = theQuantity;
        myTotalCost = calculateOrderTotal();
//        Item myItemRef = new Item(myItem, my;
    }

    /**
     * Returns the cost of the item.
     * @return cost of the item.
     */
    public BigDecimal calculateOrderTotal() {       
        myTotalCost = myItem.calculateItemTotal(myQuantity);
        return myTotalCost;
    }

    /**
     * Returns a reference to the Item in this ItemOrder. 
     * @return a reference to the Item in this ItemOrder. 
     */
    public Item getItem() {
        return myItem;
    }
    
    /**
     * Returns the quantity for this ItemOrder.
     * @return the quantity for this ItemOrder.
     */
    public int getQuantity() {  
        return myQuantity;
    }

    
    /**
     * Overridden String representation of an item order.
     */
    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append("Item: " + myItem);
        sb.append("\nNumber of items bought: " + myQuantity);
        sb.append("\nPrice: " + myNf.format(myTotalCost));
        return sb.toString();
    }

}
