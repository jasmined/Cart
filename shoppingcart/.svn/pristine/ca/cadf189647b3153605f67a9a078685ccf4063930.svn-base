package tests;

import static org.junit.Assert.*;

import java.math.BigDecimal;
// import java.text.NumberFormat;
import model.Item;
import org.junit.Before;
import org.junit.Test;

/**
 * Test class for Item.
 * @author Jasmine Dacones
 * @version 4/11/16
 */
public class ItemTest {
    
    /** Item object name. */
    private Item myItem;
//    
    /** Item object 2 name. */
    private Item myItem2;
//    
//    /** New BigDecimal. */
//    private BigDecimal myBd;
    
    /**
     * Creates an Item object for the test methods.
     */
    @Before
    public void setUp() {
        myItem = new Item("Silly Putty", BigDecimal.valueOf(4.41));
        myItem2 = new Item("Silly Putty", BigDecimal.valueOf(4.41), 6, 
                           BigDecimal.valueOf(10.04));
    }
    
    @Test
    public void testGetName() {
        assertEquals("Silly Putty", myItem.getName());
        assertEquals("Silly Putty", myItem2.getName());
    }
    
    @Test
    public void testGetPrice() {
        assertEquals(new BigDecimal(4.41), myItem.getPrice());
        assertEquals(new BigDecimal(4.41), myItem2.getPrice());
    }
    
    @Test
    public void testGetBulkQuantity() {
        assertEquals(6, myItem.getBulkQuantity());
        assertEquals(6, myItem2.getBulkQuantity());
    }
    
    @Test
    public void testBulkPrice() {
        assertEquals(new BigDecimal(0), myItem.getBulkPrice());
        assertEquals(new BigDecimal(10.04), myItem2.getBulkPrice());
    }
    
    
    /**
     * Test method for calculating the total price of the items.
     */
    @Test
    public void testCalculateItemTotal() {
        assertEquals(BigDecimal.valueOf(26.46), myItem2.calculateItemTotal(6));        
    }
    
    /**
     * Test method for checking if the item is bulk.
     */
    @Test
    public void testIsBulk() {
        assertEquals(false, myItem.isBulk());
        assertEquals(true, myItem2.isBulk());
    }
    
//    /**
//     * Test method for the String representation 
//     * of the Item object.
//     */
//    @Test
//    public void testToString() {
//        fail("Not yet implemented");
//    }

//    @Test
//    public void testEqualsObject() {
//        assertEquals(new Item("Silly Putty", new BigDecimal(4.41)), myItem);
//    }
    
//  @Test
//  public void testHashCode() {
//      fail("Not yet implemented");
//  }
    //////////////////////////////////////////
    
    // cannot test an exact hashcode
    // test equality between objects
    
    //////////////////////////////////////////

    // -9.9 round down - rounds to -9.0
    // round up - rounds up to -10
    // 9.5 and 8.5 - round half even - 9.5 rounds to 10, 8.5 rounds down to 8
    // rounds to even if equidistant
}
